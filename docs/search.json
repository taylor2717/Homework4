[
  {
    "objectID": "pages/combining.html",
    "href": "pages/combining.html",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "# setup\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(readxl)\n\nStep 1 — Read the white wine Excel (Sheet 1)\n\n# Read the first worksheet \nwhite &lt;- read_xlsx(\"../white-wine.xlsx\", sheet = 1)\n\n# print data\nwhite\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nStep 2 — Read cleaned names from Sheet 2 and apply\n\n# Sheet 2 contains alternative, standard-compliant variable names (one column).\nalt_names &lt;- read_xlsx(\"../white-wine.xlsx\", sheet = 2)\n\n# Use the first (only) column as a character vector of names.\nnew_names &lt;- alt_names[[1]]\n\n# only rename if lengths match.\nif (length(new_names) == ncol(white)) {\n  colnames(white) &lt;- new_names\n} else {\n  warning(\"Alt names length does not match columns; keeping original names.\")\n}\n\n# Tag all rows as white wine.\nwhite &lt;- white |&gt;\n  mutate(type = \"white\")\n\nwhite\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nStep 3 — Read the red wine CSV (semicolon-delimited), rename the same way, tag as red\n\n# read red wine url\nred_url &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\"\n\nred &lt;- read_delim(red_url, delim = \";\", show_col_types = FALSE)\n\n# Reuse the same cleaned names so columns align perfectly.\nif (exists(\"new_names\") && length(new_names) == ncol(red)) {\n  colnames(red) &lt;- new_names\n} else {\n  warning(\"Using original column names for red; verify they match white before binding.\")\n}\n\n# Tag all rows as red wine.\nred &lt;- red |&gt;\n  mutate(type = \"red\")\n\nred\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nStep 4 — Combine rows (white + red)\n\n# Bind rows (same columns), getting a unified dataset.\nwine_all &lt;- dplyr::bind_rows(white, red)\n\nwine_all\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nStep 5 — Filter quality &gt; 6.5 and alcohol &lt; 132\n\n# Focus on higher-quality wines and remove unrealistic alcohol values (per assignment).\nwine_filtered &lt;- wine_all |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132)\n\nwine_filtered\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nStep 6 — Sort descending by quality\n\n# Put best wines at the top.\nwine_sorted &lt;- wine_filtered |&gt;\n  arrange(desc(quality))\n\nwine_sorted\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nStep 7 — Keep only acid-related vars + alcohol + type + quality\n\n# Select any variable containing the substring \"acid\" (works for names with spaces or underscores), plus alcohol, type, and quality.\nwine_keep &lt;- wine_sorted |&gt;\n  select(contains(\"acid\"), alcohol, type, quality)\n\nwine_keep\n\n# A tibble: 1,206 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9\n 2            66             0.36        0.29     124 white       9\n 3            74             0.24        0.36     125 white       9\n 4            69             0.36        0.34     127 white       9\n 5            71             0.26        0.49     129 white       9\n 6            62             0.66        0.48     128 white       8\n 7            62             0.66        0.48     128 white       8\n 8            68             0.26        0.42     105 white       8\n 9            67             0.23        0.31     107 white       8\n10            67             0.23        0.31     107 white       8\n# ℹ 1,196 more rows\n\n\nStep 8 — Within each quality, add alcohol mean and sd\n\n# Group by the discrete quality score; append per-quality alcohol mean/sd to every row.\nwine_final &lt;- wine_keep |&gt;\n  group_by(quality) |&gt;\n  mutate(\n    alcohol_mean = mean(alcohol, na.rm = TRUE),\n    alcohol_sd   = sd(alcohol,   na.rm = TRUE)\n  ) |&gt;\n  ungroup()\n\nwine_final\n\n# A tibble: 1,206 × 8\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_sd &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Combining Excel and Delimited Data"
    ]
  },
  {
    "objectID": "pages/concepts.html",
    "href": "pages/concepts.html",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n../MyData.csv\n\n\nWhat are the major benefits of using R projects?\n\n\n\nSince there are often multiple files associated with analyses, it can make it difficult to keep analyses separate. R projects alleviates this.\n\nIt provides a way to divide work into multiple contexts, each with their own working directory, work space, history, and folder structure/source documents.\n\n\n\nWhat is git and what is github?\n\n\nGit is a version control software. GitHub is an online hosting service for Git-based projects.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\n\nThe two main differences are how they handle printing and data handling/behavior.\nWhen you print a data frame, it displays all rows and columns. While a tibble shows only the first 10 rows and the columns that fit on the screen.\nAlso, Data frames automatically convert character strings to factors. However, tibbles do not do this; they preserve the original input data type.\n\n\n\nRewrite the following nested function call using Base R’s chaining operator:\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\n\nlibrary(dplyr)\nlibrary(tibble)\n\nas_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)",
    "crumbs": [
      "Home",
      "Conceptual Questions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homework 4",
    "section": "",
    "text": "An example pages site with multiple pages and a table of contents.\nThis could be a landing page for the site. Feel free to put whatever here!",
    "crumbs": [
      "Home",
      "Homework 4"
    ]
  },
  {
    "objectID": "pages/read_delimited.html",
    "href": "pages/read_delimited.html",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "# setup \n# Load packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  },
  {
    "objectID": "pages/read_delimited.html#glass-data",
    "href": "pages/read_delimited.html#glass-data",
    "title": "Reading Delimited Data",
    "section": "Glass Data",
    "text": "Glass Data\nStep 1 — Read from URL + add column names\n\nglass_url &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/glass.data\"\n\n# Assign meaningful column names (dataset lacks headers).\nglass &lt;- read_csv(\n  glass_url,\n  col_names = c(\"Id\",\"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type\"),\n  show_col_types = FALSE\n)\n\n# print data\nglass\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe  Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0        1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0        1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0        1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0        1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0        1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26     1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0        1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0        1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0        1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11     1\n# ℹ 204 more rows\n\n\nStep 2/3 — Overwrite numeric Type with character labels, and filter observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\n# Recode the class numbers to human-readable labels using mutate() + recode().\nglass2 &lt;- glass |&gt;\n  mutate(\n    Type = recode(\n      Type,\n      `1`=\"building_windows_float_processed\",\n      `2`=\"building_windows_non_float_processed\",\n      `3`=\"vehicle_windows_float_processed\",\n      `4`=\"vehicle_windows_non_float_processed\",\n      `5`=\"containers\",\n      `6`=\"tableware\",\n      `7`=\"headlamps\"\n    )\n  ) |&gt;\n  # Keep only chemically low-iron glass and two target classes.\n  filter(Fe &lt; 0.2, Type %in% c(\"tableware\",\"headlamps\"))\n\nglass2\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type     \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware\n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware\n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware\n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware\n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware\n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware\n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware\n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware\n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware\n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps\n# ℹ 28 more rows",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  },
  {
    "objectID": "pages/read_delimited.html#yeast-data",
    "href": "pages/read_delimited.html#yeast-data",
    "title": "Reading Delimited Data",
    "section": "Yeast Data",
    "text": "Yeast Data\nStep 1 — Read from URL + add column names\n\nyeast_url &lt;- \"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\"\n\nyeast &lt;- read_table(\n  yeast_url,\n  col_names = c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\"),\n  col_types = cols(\n    seq_name = col_character(),\n    mcg = col_double(),\n    gvh = col_double(),\n    alm = col_double(),\n    mit = col_double(),\n    erl = col_double(),\n    pox = col_double(),\n    vac = col_double(),\n    nuc = col_double(),\n    class = col_character()\n  )\n)\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nStep 2/3 — Remove seq_name and nuc, and within each class, add mean and median for each numeric variable\n\nyeast2 &lt;- yeast |&gt;\n  # Drop the ID-like column and the nuc signal column \n  select(-seq_name, -nuc) |&gt;\n  # Group by localization class; for each numeric column, append _mean and _median.\n  group_by(class) |&gt;\n  mutate(\n    across(\n      .cols = c(mcg, gvh, alm, mit, erl, pox, vac),\n      .fns  = list(mean = ~mean(.x, na.rm=TRUE),\n                   median = ~median(.x, na.rm=TRUE)),\n      .names = \"{.col}_{.fn}\"\n    )\n  ) |&gt;\n  ungroup()\n\nyeast2\n\n# A tibble: 1,484 × 22\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  }
]